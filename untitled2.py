# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/193GkuTHOEk1BMtHqjYmWEHdq67GMqBcr
"""

# Lab 06: Polynomial Linear Regression
# Dataset: House Size (sq. ft) vs Price (Rs. 1000)

# Step 1: Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score
import math

# Step 2: Define dataset
data = {
    "House_Size": [50, 80, 120, 150, 180, 200, 250],
    "Price": [150, 220, 300, 400, 510, 580, 750]
}

df = pd.DataFrame(data)
X = df[["House_Size"]].values
y = df["Price"].values

# Step 3: Visualize dataset
plt.scatter(X, y, color='red')
plt.title("House Size vs Price (Dataset)")
plt.xlabel("House Size (sq. ft)")
plt.ylabel("Price (Rs. 1000)")
plt.show()

# Step 4: Build Linear Regression model
lin_reg = LinearRegression()
lin_reg.fit(X, y)

# Visualize Linear Regression
plt.scatter(X, y, color='red')
plt.plot(X, lin_reg.predict(X), color='blue')
plt.title("Linear Regression Fit")
plt.xlabel("House Size (sq. ft)")
plt.ylabel("Price (Rs. 1000)")
plt.show()

# Step 5: Build Polynomial Regression model (degree 4)
poly_reg = PolynomialFeatures(degree=4)
X_poly = poly_reg.fit_transform(X)
lin_reg_poly = LinearRegression()
lin_reg_poly.fit(X_poly, y)

# Visualize Polynomial Regression
x_grid = np.arange(min(X), max(X), 0.1).reshape(-1, 1)
plt.scatter(X, y, color='red')
plt.plot(x_grid, lin_reg_poly.predict(poly_reg.transform(x_grid)), color='blue')
plt.title("Polynomial Regression Fit (Degree 4)")
plt.xlabel("House Size (sq. ft)")
plt.ylabel("Price (Rs. 1000)")
plt.show()

# Step 6: Predictions
pred_lin = lin_reg.predict([[350]])[0]
pred_poly = lin_reg_poly.predict(poly_reg.transform([[350]]))[0]

print("Prediction Results:")
print(f"Linear Regression Prediction (350 sq. ft): {pred_lin*1000:.2f} ")
print(f"Polynomial Regression Prediction (350 sq. ft): {pred_poly*1000:.2f} ")

# Step 7: Model Evaluation
y_pred_lin = lin_reg.predict(X)
y_pred_poly = lin_reg_poly.predict(X_poly)

rmse_lin = math.sqrt(mean_squared_error(y, y_pred_lin))
r2_lin = r2_score(y, y_pred_lin)

rmse_poly = math.sqrt(mean_squared_error(y, y_pred_poly))
r2_poly = r2_score(y, y_pred_poly)

print("\nModel Evaluation:")
print("Linear Regression:")
print(f"  RMSE = {rmse_lin:.2f}")
print(f"  R^2 = {r2_lin:.4f}")

print("Polynomial Regression (Degree 4):")
print(f"  RMSE = {rmse_poly:.2f}")
print(f"  R^2 = {r2_poly:.4f}")

